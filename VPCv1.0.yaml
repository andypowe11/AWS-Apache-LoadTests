AWSTemplateFormatVersion: 2010-09-09
Description: >
    This template deploys a VPC, with a pair of public and private subnets spread
    across two Availabilty Zones. It deploys an Internet Gateway, with a default
    route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ),
    and default routes for them in the private subnets.
Parameters:

  EnvironmentName:
    Description: Please enter the name for this VPC
    Type: String
    Default: ApacheLoadtest

  VpcName:
    Description: Please enter the name for this VPC
    Type: String
    Default: VPC

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.200.160.0/24

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.200.160.128/27

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.200.160.160/27

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.200.160.0/26

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.200.160.64/26

  PrivateDNS:
    Description: "Private DNS Zone"
    Type: String
    Default: "apacheloadtest."

Resources:

  ## Base Networking ##

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}_${VpcName}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}_${VpcName}_igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}_public_1a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}_public_1b

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}_private_1a

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName}_private_1b

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}_rtb_public

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}_rtb_private_1a

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}_rtb_private_1b

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  ## Security Groups ##

  WebELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}_webfe_sg
      GroupDescription: Allow http/https/ssh to elb
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName}_webfe_sg

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}_web_sg
      GroupDescription: Allow http/https to web servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId: !GetAtt WebELBSecurityGroup.GroupId
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        SourceSecurityGroupId: !GetAtt WebELBSecurityGroup.GroupId
      Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName}_web_sg

  SolrELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}_solrelb_sg
      GroupDescription: Allow traffic to solr elb
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8983'
        ToPort: '8983'
        SourceSecurityGroupId: !GetAtt WebSecurityGroup.GroupId
      Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName}_solrelb_sg

  SolrSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}_solr_sg
      GroupDescription: Allow traffic to solr servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8983'
        ToPort: '8983'
        SourceSecurityGroupId: !GetAtt SolrELBSecurityGroup.GroupId
      - IpProtocol: tcp
        FromPort: '8983'
        ToPort: '8983'
        SourceSecurityGroupId: !GetAtt WebSecurityGroup.GroupId
      Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName}_solr_sg

  SolrSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: '8983'
      ToPort: '8983'
      SourceSecurityGroupId: !GetAtt SolrSecurityGroup.GroupId
      GroupId: !GetAtt SolrSecurityGroup.GroupId

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}_rds_sg
      GroupDescription: Allow traffic to rds servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: !GetAtt WebSecurityGroup.GroupId
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        CidrIp: 10.3.13.0/24
      Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName}_rds_sg

  RDSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: '3306'
      ToPort: '3306'
      SourceSecurityGroupId: !GetAtt RDSSecurityGroup.GroupId
      GroupId: !GetAtt RDSSecurityGroup.GroupId

  SFTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}_sftp_sg
      GroupDescription: Allow traffic to sftp server
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 188.92.143.3/32
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 137.205.230.128/25
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 109.153.242.135/32
      Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName}_sftp_sg

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}_efs_sg
      GroupDescription: Allow efs traffic to servers
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        SourceSecurityGroupId: !GetAtt WebSecurityGroup.GroupId
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        SourceSecurityGroupId: !GetAtt SFTPSecurityGroup.GroupId
      Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName}_efs_sg

# Private DNS

  PrivateDNSZone:
    Type : AWS::Route53::HostedZone
    Properties:
      Name: !Sub "${AWS::StackName}.${EnvironmentName}.${PrivateDNS}"
      HostedZoneConfig:
        Comment: !Sub "VPC Private Zone for: ${AWS::StackName}.${EnvironmentName}.${PrivateDNS}"
      VPCs:
      - VPCId: !Ref VPC
        VPCRegion: !Sub "${AWS::Region}"

Outputs:

  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}

  EnvironmentName:
    Description: Environment Name
    Value: !Ref EnvironmentName
    Export:
      Name: !Sub ${AWS::StackName}-EnvironmentName

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnets

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2

  WebELBSecurityGroup:
    Description: Allow http/https to elb
    Value: !Ref WebELBSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-WebELBSecurityGroup

  WebSecurityGroup:
    Description: Allow traffic to web servers
    Value: !Ref WebSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-WebSecurityGroup

  WebELBSecurityGroup:
    Description: Allow traffic to FE web ELB
    Value: !Ref WebELBSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-WebELBSecurityGroup

  EFSSecurityGroup:
    Description: Allow traffic to efs servers
    Value: !Ref EFSSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-EFSSecurityGroup

  PrivateDNS:
    Description: Private DNS
    Value: !Ref PrivateDNS
    Export:
      Name: !Sub ${AWS::StackName}-PrivateDNS

  PrivateDNSZone:
    Description: Private DNS Zone
    Value: !Ref PrivateDNSZone
    Export:
      Name: !Sub ${AWS::StackName}-PrivateDNSZone

  PrivateDNSSuffix:
    Description: Suffix to use for private DNS names
    Value: !Sub "${AWS::StackName}.${EnvironmentName}.${PrivateDNS}"
    Export:
      Name: !Sub ${AWS::StackName}-PrivateDNSSuffix
